1.props
	场景:父传子或者子传父
	父传子传递的是数据
		父组件给子组件的组件标签身上添加标签属性
		子组件声明props,用来接收对应的标签属性

	子传父
	父组件给子组件传递的是函数
		父组件在methods中定义一个修改data的函数,this默认指向自身
		父组件将函数通过标签属性传递给子组件,子组件通过props接收
		子组件调用函数,并传入实参,让父组件实例修改自身的data状态

2.provide/inject
	场景:祖孙组件之间通信
	祖先组件使用provide暴露相关数据
	子孙组件通过inject接收最近的provide暴露的数据
	注意:provide和inject默认不是响应式的效果,如果需要响应式,需要自己手动创建

3.自定义事件
	v-model
		实现原理:
		1.给input标签使用
			1.控制input标签的初始值显示
				:value="num"
			2.监视用户的输入事件,并获取到当前的内容,更新data中的数据
				@input=" event => num = event.target.value"
				注意:默认绑定的事件是input事件
		2.给组件标签使用
			1.向子组件传递标签属性
				:value="num"
			2.给子组件绑定自定义事件,方便子组件修改父组件的状态
				事件名:input
			注意:子组件可以通过model配置项自定义父节点v-model传下来的标签属性名和事件名
	$on,$once,$off,$emit
	.sync修饰符
			1.向子组件传递标签属性
				:msg="num"
			2.给子组件绑定自定义事件,方便子组件修改父组件的状态
				事件名:update:msg
	全局事件总线
		1.Vue.prototype.$bus = new Vue();
		2.this.$bus.$on('xxx',(value)=>{})
		3.this.$bus.$emit('xxx','xixi')
		注意:使用结束之后,记得移除全局事件总线的自定义事件,否则容易导致内存溢出

	注意:需要我们自己主动解绑的事件,只有自己绑定的原生DOM事件,Vue中出现的自定义事件不需要我们操心,Vue会自动解绑

4.获取到对应组件实例
	$parent->获取到父组件实例
	$root->获取到根组件实例(根组件不是App是Root)
	$children->获取到子组件实例合成的数组(数组中存放的顺序和template书写顺序不一定一致)
	$refs
		1.绑定在标签上->获取到标签对应的真实DOM
		2.绑定在组件上->获取到组件的实例对象
	
5.$attrs,$listener
	$attrs->父组件通过标签属性给子组件传递数据,如果子组件没有声明props去接收,会自动被收集到$attrs属性中
    		<A {...$attrs}/>		->	通过解构$attrs,可以一次性将多个未接受的props数据传递给子组件
	$listener->用来收集父组件给子组件绑定的自定义事件


6.插槽
	通过父组件将template写入子组件标签内部,子组件通过slot组件显示该template,实现父子组件通信
	默认插槽,默认也有名字,名字为default
	具名插槽
	作用域插槽

7.Vuex