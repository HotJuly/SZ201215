1.props
	场景:父传子或者子传父
	父传子传递的是数据
		父组件给子组件的组件标签身上添加标签属性
		子组件声明props,用来接收对应的标签属性

	子传父
	父组件给子组件传递的是函数
		父组件在methods中定义一个修改data的函数,this默认指向自身
		父组件将函数通过标签属性传递给子组件,子组件通过props接收
		子组件调用函数,并传入实参,让父组件实例修改自身的data状态

2.provide/inject
	场景:祖孙组件之间通信
	祖先组件使用provide暴露相关数据
	子孙组件通过inject接收最近的provide暴露的数据
	注意:provide和inject默认不是响应式的效果,如果需要响应式,需要自己手动创建

3.自定义事件
	v-model
		实现原理:
		1.给input标签使用
			1.控制input标签的初始值显示
				:value="num"
			2.监视用户的输入事件,并获取到当前的内容,更新data中的数据
				@input=" event => num = event.target.value"
				注意:默认绑定的事件是input事件
		2.给组件标签使用
			1.向子组件传递标签属性
				:value="num"
			2.给子组件绑定自定义事件,方便子组件修改父组件的状态
				事件名:input
			注意:子组件可以通过model配置项自定义父节点v-model传下来的标签属性名和事件名
